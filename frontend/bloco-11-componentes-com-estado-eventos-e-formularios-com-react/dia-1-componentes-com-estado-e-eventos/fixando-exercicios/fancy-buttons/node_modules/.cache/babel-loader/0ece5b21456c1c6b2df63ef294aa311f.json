{"ast":null,"code":"var _jsxFileName = \"/home/viieorathi/trybe-exercicios/frontend/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/fixando-exercicios/fancy-buttons/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    /* Para definir um estado inicial ao componente, a ser definido\n    no momento em que o componente for colocado na tela, faça uma atribuição\n    de um objeto à chave `state` do `this`, ou seja, ao `this.state`*/\n\n    this.handleItalo = () => {\n      console.log(this);\n      this.setState((estadoAnterior, _props) => ({\n        numerodeItalos: estadoAnterior.numerodeItalos + 1\n      }));\n    };\n\n    this.handleDouglas = () => {\n      this.setState((estadoAnterior, _props) => ({\n        numerodeDouglas: estadoAnterior.numerodeDouglas + 1\n      }));\n    };\n\n    this.handleClick = () => {\n      /* Você **NUNCA** deve fazer atribuições diretamente a `this.state`. Deve,\n      ao invés disso, SEMPRE utilizar a função `this.setState(novoEstado)` do\n      React*/\n      this.setState((estadoAnterior, _props) => ({\n        numeroDeCliques: estadoAnterior.numeroDeCliques + 1\n      }));\n    };\n\n    this.classColors = num => {\n      return num % 2 === 0 ? 'green' : 'white';\n    };\n\n    this.state = {\n      numeroDeCliques: 0,\n      numerodeItalos: 0,\n      numerodeDouglas: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleItalo = this.handleItalo.bind(this);\n    this.handleDouglas = this.handleDouglas.bind(this);\n  }\n\n  render() {\n    const {\n      numeroDeCliques,\n      numerodeItalos,\n      handleItalo\n    } = this.state;\n    /*Para LER o estado, você pode usar `this.state.chaveDoMeuEstado`*/\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleClick,\n        children: this.state.numeroDeCliques\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleDouglas,\n        children: this.state.numerodeDouglas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleItalo,\n        children: this.state.numerodeItalos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/viieorathi/trybe-exercicios/frontend/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/fixando-exercicios/fancy-buttons/src/App.js"],"names":["React","App","Component","constructor","handleItalo","console","log","setState","estadoAnterior","_props","numerodeItalos","handleDouglas","numerodeDouglas","handleClick","numeroDeCliques","classColors","num","state","bind","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AACA;AACJ;AACA;;AAJgB,SAgBdC,WAhBc,GAgBA,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,WAAKC,QAAL,CAAc,CAACC,cAAD,EAAiBC,MAAjB,MAA6B;AACzCC,QAAAA,cAAc,EAAEF,cAAc,CAACE,cAAf,GAAgC;AADP,OAA7B,CAAd;AAGD,KArBa;;AAAA,SAuBdC,aAvBc,GAuBE,MAAM;AACpB,WAAKJ,QAAL,CAAc,CAACC,cAAD,EAAiBC,MAAjB,MAA6B;AACzCG,QAAAA,eAAe,EAAEJ,cAAc,CAACI,eAAf,GAAiC;AADT,OAA7B,CAAd;AAGD,KA3Ba;;AAAA,SA4BdC,WA5Bc,GA4BA,MAAM;AAClB;AACJ;AACA;AACI,WAAKN,QAAL,CAAc,CAACC,cAAD,EAAiBC,MAAjB,MAA6B;AACzCK,QAAAA,eAAe,EAAEN,cAAc,CAACM,eAAf,GAAiC;AADT,OAA7B,CAAd;AAGD,KAnCa;;AAAA,SAqCdC,WArCc,GAqCCC,GAAD,IAAS;AACrB,aAAOA,GAAG,GAAG,CAAN,KAAY,CAAZ,GAAgB,OAAhB,GAA0B,OAAjC;AACD,KAvCa;;AAKZ,SAAKC,KAAL,GAAa;AACXH,MAAAA,eAAe,EAAE,CADN;AAEXJ,MAAAA,cAAc,EAAE,CAFL;AAGXE,MAAAA,eAAe,EAAE;AAHN,KAAb;AAMA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBK,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKd,WAAL,GAAmB,KAAKA,WAAL,CAAiBc,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKP,aAAL,GAAqB,KAAKA,aAAL,CAAmBO,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AA2BDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAACL,MAAAA,eAAD;AAAkBJ,MAAAA,cAAlB;AAAkCN,MAAAA;AAAlC,QAAiD,KAAKa,KAA5D;AACA;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACA;AAAQ,QAAA,OAAO,EAAE,KAAKJ,WAAtB;AAAA,kBAAoC,KAAKI,KAAL,CAAWH;AAA/C;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAQ,QAAA,OAAO,EAAE,KAAKH,aAAtB;AAAA,kBAAsC,KAAKM,KAAL,CAAWL;AAAjD;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA;AAAQ,QAAA,OAAO,EAAE,KAAKR,WAAtB;AAAA,kBAAoC,KAAKa,KAAL,CAAWP;AAA/C;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AApD+B;;AAuDlC,eAAeT,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    /* Para definir um estado inicial ao componente, a ser definido\n    no momento em que o componente for colocado na tela, faça uma atribuição\n    de um objeto à chave `state` do `this`, ou seja, ao `this.state`*/\n    this.state = {\n      numeroDeCliques: 0,\n      numerodeItalos: 0,\n      numerodeDouglas: 0,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleItalo = this.handleItalo.bind(this);\n    this.handleDouglas = this.handleDouglas.bind(this);\n  }\n\n  handleItalo = () => {\n    console.log(this)\n    this.setState((estadoAnterior, _props) => ({\n      numerodeItalos: estadoAnterior.numerodeItalos + 1,\n    }));\n  };\n\n  handleDouglas = () => {\n    this.setState((estadoAnterior, _props) => ({\n      numerodeDouglas: estadoAnterior.numerodeDouglas + 1,\n    }))\n  }\n  handleClick = () => {\n    /* Você **NUNCA** deve fazer atribuições diretamente a `this.state`. Deve,\n    ao invés disso, SEMPRE utilizar a função `this.setState(novoEstado)` do\n    React*/\n    this.setState((estadoAnterior, _props) => ({\n      numeroDeCliques: estadoAnterior.numeroDeCliques + 1,\n    }));\n  };\n\n  classColors = (num) => {\n    return num % 2 === 0 ? 'green' : 'white' \n  }\n\n  render() {\n    const {numeroDeCliques, numerodeItalos, handleItalo} = this.state;\n    /*Para LER o estado, você pode usar `this.state.chaveDoMeuEstado`*/\n    return (\n      <div className='App'>\n      <button onClick={this.handleClick}>{this.state.numeroDeCliques}</button>\n      <button onClick={this.handleDouglas}>{this.state.numerodeDouglas}</button>\n      <button onClick={this.handleItalo}>{this.state.numerodeItalos}</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}