{"ast":null,"code":"var _jsxFileName = \"/home/viieorathi/trybe-exercicios/frontend/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/fixando-exercicios/fancy-buttons/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    /* Para definir um estado inicial ao componente, a ser definido\n    no momento em que o componente for colocado na tela, faça uma atribuição\n    de um objeto à chave `state` do `this`, ou seja, ao `this.state`*/\n\n    this.handleClick = () => {\n      /* Você **NUNCA** deve fazer atribuições diretamente a `this.state`. Deve,\n      ao invés disso, SEMPRE utilizar a função `this.setState(novoEstado)` do\n      React*/\n      // this.setState = {\n      //   numeroDeCliques: 1\n      // }\n      this.setState((estadoAnterior, _props) => ({\n        numeroDeCliques: estadoAnterior.numeroDeCliques + 1\n      }));\n      console.log(this);\n    };\n\n    this.state = {\n      numeroDeCliques: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  render() {\n    /*Para LER o estado, você pode usar `this.state.chaveDoMeuEstado`*/\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.handleClick,\n      children: this.state.numeroDeCliques\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/viieorathi/trybe-exercicios/frontend/bloco-11-componentes-com-estado-eventos-e-formularios-com-react/dia-1-componentes-com-estado-e-eventos/fixando-exercicios/fancy-buttons/src/App.js"],"names":["React","App","Component","constructor","handleClick","setState","estadoAnterior","_props","numeroDeCliques","console","log","state","bind","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AACA;AACJ;AACA;;AAJgB,SAadC,WAbc,GAaA,MAAM;AAClB;AACJ;AACA;AACI;AACA;AACA;AACA,WAAKC,QAAL,CAAc,CAACC,cAAD,EAAiBC,MAAjB,MAA6B;AACzCC,QAAAA,eAAe,EAAEF,cAAc,CAACE,eAAf,GAAiC;AADT,OAA7B,CAAd;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,KAxBa;;AAKZ,SAAKC,KAAL,GAAa;AACXH,MAAAA,eAAe,EAAE;AADN,KAAb;AAGA,SAAKJ,WAAL,GAAmB,KAAKA,WAAL,CAAiBQ,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAiBDC,EAAAA,MAAM,GAAG;AACP;AACA,wBAAO;AAAQ,MAAA,OAAO,EAAE,KAAKT,WAAtB;AAAA,gBAAoC,KAAKO,KAAL,CAAWH;AAA/C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA9B+B;;AAiClC,eAAeP,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    /* Para definir um estado inicial ao componente, a ser definido\n    no momento em que o componente for colocado na tela, faça uma atribuição\n    de um objeto à chave `state` do `this`, ou seja, ao `this.state`*/\n    this.state = {\n      numeroDeCliques: 0\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleItalo\n\n  handleClick = () => {\n    /* Você **NUNCA** deve fazer atribuições diretamente a `this.state`. Deve,\n    ao invés disso, SEMPRE utilizar a função `this.setState(novoEstado)` do\n    React*/\n    // this.setState = {\n    //   numeroDeCliques: 1\n    // }\n    this.setState((estadoAnterior, _props) => ({\n      numeroDeCliques: estadoAnterior.numeroDeCliques + 1\n    }))\n    console.log(this)\n  }\n\n  render() {\n    /*Para LER o estado, você pode usar `this.state.chaveDoMeuEstado`*/\n    return <button onClick={this.handleClick}>{this.state.numeroDeCliques}</button>\n  };\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}